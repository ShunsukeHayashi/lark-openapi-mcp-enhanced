version: '3.8'

services:
  # Production STDIO Service
  lark-mcp-stdio:
    build:
      context: .
      target: production
    container_name: lark-mcp-stdio
    environment:
      - NODE_ENV=production
      - APP_ID=${APP_ID}
      - APP_SECRET=${APP_SECRET}
      - LARK_DOMAIN=${LARK_DOMAIN:-https://open.feishu.cn}
      - LARK_LANGUAGE=${LARK_LANGUAGE:-en}
      - LARK_TOKEN_MODE=${LARK_TOKEN_MODE:-auto}
    stdin_open: true
    tty: true
    restart: unless-stopped
    networks:
      - lark-network
    profiles:
      - production

  # Production SSE Service
  lark-mcp-sse:
    build:
      context: .
      target: production
    container_name: lark-mcp-sse
    environment:
      - NODE_ENV=production
      - APP_ID=${APP_ID}
      - APP_SECRET=${APP_SECRET}
      - LARK_DOMAIN=${LARK_DOMAIN:-https://open.feishu.cn}
      - LARK_LANGUAGE=${LARK_LANGUAGE:-en}
      - LARK_TOKEN_MODE=${LARK_TOKEN_MODE:-auto}
    command: ["node", "dist/cli.js", "mcp", "--mode", "sse", "--host", "0.0.0.0", "--port", "3000", "--tools", "preset.default"]
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - lark-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/sse"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - production

  # Development STDIO Service
  lark-mcp-stdio-dev:
    build:
      context: .
      target: development
    container_name: lark-mcp-stdio-dev
    environment:
      - NODE_ENV=development
      - APP_ID=${APP_ID}
      - APP_SECRET=${APP_SECRET}
      - LARK_DOMAIN=${LARK_DOMAIN:-https://open.feishu.cn}
      - LARK_LANGUAGE=${LARK_LANGUAGE:-en}
      - LARK_TOKEN_MODE=${LARK_TOKEN_MODE:-auto}
    volumes:
      - .:/app
      - /app/node_modules
    stdin_open: true
    tty: true
    restart: unless-stopped
    networks:
      - lark-network
    profiles:
      - development

  # Development SSE Service
  lark-mcp-sse-dev:
    build:
      context: .
      target: development
    container_name: lark-mcp-sse-dev
    environment:
      - NODE_ENV=development
      - APP_ID=${APP_ID}
      - APP_SECRET=${APP_SECRET}
      - LARK_DOMAIN=${LARK_DOMAIN:-https://open.feishu.cn}
      - LARK_LANGUAGE=${LARK_LANGUAGE:-en}
      - LARK_TOKEN_MODE=${LARK_TOKEN_MODE:-auto}
    volumes:
      - .:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - lark-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/sse"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - development

  # Genesis Service
  lark-genesis:
    build:
      context: .
      target: development
    container_name: lark-genesis
    environment:
      - NODE_ENV=development
      - APP_ID=${APP_ID}
      - APP_SECRET=${APP_SECRET}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - LARK_DOMAIN=${LARK_DOMAIN:-https://open.feishu.cn}
    volumes:
      - .:/app
      - /app/node_modules
    command: ["node", "dist/genesis/cli/genesis-cli.js", "generate", "--help"]
    profiles:
      - genesis
    networks:
      - lark-network

networks:
  lark-network:
    driver: bridge